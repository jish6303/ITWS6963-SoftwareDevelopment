package demo.model;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 03 18:15:54 EST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LoginImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Emailid {
            public Object get(LoginImpl obj) {
                return obj.getEmailid();
            }

            public void put(LoginImpl obj, Object value) {
                obj.setEmailid((String)value);
            }
        }
        ,
        Password {
            public Object get(LoginImpl obj) {
                return obj.getPassword();
            }

            public void put(LoginImpl obj, Object value) {
                obj.setPassword((String)value);
            }
        }
        ,
        Securityquestion {
            public Object get(LoginImpl obj) {
                return obj.getSecurityquestion();
            }

            public void put(LoginImpl obj, Object value) {
                obj.setSecurityquestion((String)value);
            }
        }
        ,
        Securityanswer {
            public Object get(LoginImpl obj) {
                return obj.getSecurityanswer();
            }

            public void put(LoginImpl obj, Object value) {
                obj.setSecurityanswer((String)value);
            }
        }
        ,
        Firstname {
            public Object get(LoginImpl obj) {
                return obj.getFirstname();
            }

            public void put(LoginImpl obj, Object value) {
                obj.setFirstname((String)value);
            }
        }
        ,
        Lastname {
            public Object get(LoginImpl obj) {
                return obj.getLastname();
            }

            public void put(LoginImpl obj, Object value) {
                obj.setLastname((String)value);
            }
        }
        ,
        Jobrole {
            public Object get(LoginImpl obj) {
                return obj.getJobrole();
            }

            public void put(LoginImpl obj, Object value) {
                obj.setJobrole((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(LoginImpl object);

        public abstract void put(LoginImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int EMAILID = AttributesEnum.Emailid.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int SECURITYQUESTION = AttributesEnum.Securityquestion.index();
    public static final int SECURITYANSWER = AttributesEnum.Securityanswer.index();
    public static final int FIRSTNAME = AttributesEnum.Firstname.index();
    public static final int LASTNAME = AttributesEnum.Lastname.index();
    public static final int JOBROLE = AttributesEnum.Jobrole.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LoginImpl() {
    }

    /**
     * Gets the attribute value for Emailid, using the alias name Emailid.
     * @return the value of Emailid
     */
    public String getEmailid() {
        return (String)getAttributeInternal(EMAILID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Emailid.
     * @param value value to set the Emailid
     */
    public void setEmailid(String value) {
        setAttributeInternal(EMAILID, value);
    }

    /**
     * Gets the attribute value for Password, using the alias name Password.
     * @return the value of Password
     */
    public String getPassword() {
        return (String)getAttributeInternal(PASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Password.
     * @param value value to set the Password
     */
    public void setPassword(String value) {
        setAttributeInternal(PASSWORD, value);
    }

    /**
     * Gets the attribute value for Securityquestion, using the alias name Securityquestion.
     * @return the value of Securityquestion
     */
    public String getSecurityquestion() {
        return (String)getAttributeInternal(SECURITYQUESTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Securityquestion.
     * @param value value to set the Securityquestion
     */
    public void setSecurityquestion(String value) {
        setAttributeInternal(SECURITYQUESTION, value);
    }

    /**
     * Gets the attribute value for Securityanswer, using the alias name Securityanswer.
     * @return the value of Securityanswer
     */
    public String getSecurityanswer() {
        return (String)getAttributeInternal(SECURITYANSWER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Securityanswer.
     * @param value value to set the Securityanswer
     */
    public void setSecurityanswer(String value) {
        setAttributeInternal(SECURITYANSWER, value);
    }

    /**
     * Gets the attribute value for Firstname, using the alias name Firstname.
     * @return the value of Firstname
     */
    public String getFirstname() {
        return (String)getAttributeInternal(FIRSTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Firstname.
     * @param value value to set the Firstname
     */
    public void setFirstname(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**
     * Gets the attribute value for Lastname, using the alias name Lastname.
     * @return the value of Lastname
     */
    public String getLastname() {
        return (String)getAttributeInternal(LASTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Lastname.
     * @param value value to set the Lastname
     */
    public void setLastname(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**
     * Gets the attribute value for Jobrole, using the alias name Jobrole.
     * @return the value of Jobrole
     */
    public String getJobrole() {
        return (String)getAttributeInternal(JOBROLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Jobrole.
     * @param value value to set the Jobrole
     */
    public void setJobrole(String value) {
        setAttributeInternal(JOBROLE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param emailid key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String emailid) {
        return new Key(new Object[]{emailid});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("demo.model.Login");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
